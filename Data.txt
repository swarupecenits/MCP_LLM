- script: |
    cd playwright_project
    npx playwright test --reporter=json --trace on > ../results.json
    cp tests/trace.zip ../trace.zip
  displayName: "Run Failing Test with JSON Reporter and Trace"
  continueOnError: true

- task: AzureCLI@2
  displayName: "Run Test Generation Script Azure OpenAI"
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: "bash"
    scriptLocation: "inlineScript"
    inlineScript: |
      python scripts/e2e-test-generator/agent_v3.py "$(cat pr_description.txt)"
    addSpnToEnvironment: true
  env:
    AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)


************************************************************************************


- script: |
    cd playwright_project
    npx playwright test --reporter=json --trace on > results.json
    cp test-results/*.zip ../trace.zip
  displayName: "Run Failing Test with JSON Reporter and Trace"
  continueOnError: true

- task: AzureCLI@2
  displayName: "Run Test Generation Script Azure OpenAI"
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: "bash"
    scriptLocation: "inlineScript"
    inlineScript: |
      python scripts/e2e-test-generator/self_heal_v2.py --task "Navigate to Azure AI Foundry Language Playground; Verify playground is accessible" --results results.json
    addSpnToEnvironment: true
  env:
    AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)

************************************************************************************

python self_heal_v2.py --task "Your test steps here" --results results.json

************************************************************************************

 npx playwright test ai-foundry-language-playground.spec.ts  --reporter=json --trace on > results.json


**********************************************************************************

# ... (Previous tasks, including Playwright test execution) ...

          - script: |
              python scripts/e2e-test-generator/parse_errors.py
            displayName: "Generate Error Details File"
            workingDirectory: $(Build.SourcesDirectory) # Ensure script runs from repo root where test-results is

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.SourcesDirectory)/error_details.md' # Adjust if using .txt
              artifactName: 'TestFailureDetails'
              publishLocation: 'Container'
            displayName: 'Publish Test Failure Details Artifact'
            condition: failed() # Only publish if previous tasks failed, or always() if you want it always


*************************************************************************************

- script: |
    cd playwright_project
    npx playwright test --reporter=json --trace on > results.json
    cp test-results/*.zip ../trace.zip
  displayName: "Run Failing Test with JSON Reporter and Trace"
  continueOnError: true

- task: AzureCLI@2
  displayName: "Run Test Generation Script Azure OpenAI"
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: "bash"
    scriptLocation: "inlineScript"
    inlineScript: |
      python scripts/e2e-test-generator/self_heal_v2.py --results results.json
    addSpnToEnvironment: true
  env:
    AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
    AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)


*********************************************************************

# Usage examples:
python script.py --input failing_test.spec.ts
python script.py --input test.spec.ts --output fixed_test.spec.ts
python script.py --input my_test.ts --mcp-config custom_mcp.json
***********************************************************************************

python self_heal_v7.py --task "Resolve the error in the test script" --test-script tests/generated_test_output_3.spec.ts --error-json test-result-3.json


- timing issues
- dead clicks
- network errors
...and many other common errors.

*************************************************************************************

Generate a playwright test scripts for this scenario:
Navigate to the url: https://ai.azure.com/foundryProject/overview?wsid=/subscriptions/696debc0-8b66-4d84-87b1-39f43917d76c/resourceGroups/rg-t-schanda-8629/providers/Microsoft.CognitiveServices/accounts/playwright-pj-resource/projects/playwright_pj&tid=72f988bf-86f1-41af-91ab-2d7cd011db47
GO to Fine Tuning
Click on "Fine-tune Model"
Select gpt-4.1 from Base Models
Click on next
Click on Add Training data
Select dropdown on Select data
Select any json file
Click on Apply
Click on submit button and wait till the model name gets visible in the page
Now create a playwright test script for the exact ections you performed taking consider of the timeout issues


****************************************************************************************

<!-- System Prompt -->

- You are a playwright test generator.
- You are given a scenario and you need to generate a playwright test for it.
- DO NOT generate test code based on the scenario alone.
- DO run steps one by one using the tools provided by the Playwright MCP.
- Only after all steps are completed, emit a Playwright TypeScript test that uses @playwright/test.
- Also Include this code segment [const userDataDir = path.resolve('C:/Users/t-schanda/AppData/Local/Google/Chrome/User Data/Profile 1');

  const context = await chromium.launchPersistentContext(userDataDir, {
  headless: false,
  executablePath: 'C:/Program Files/Google/Chrome/Application/chrome.exe',
  args: ['--start-maximized'],
  });

  const page = await context.newPage();
  ] to run in current chrome browser instance of the user and then close the browser

- Save generated test file in the tests directory.
- Execute the test file and iterate until the test passes.

********************************************************************************************

Now read these context files and generate a new test script file in the test directory remembering the last logic that you have used in the final tests\fine_tune_gpt41.spec.ts
