trigger: none
pr: none

pool:
  vmImage: Vienna-UX-Windows2022-E2E

variables:
  BRANCH_NAME: "ai-generated-e2e-tests-$(Build.BuildId)"
  azureServiceConnection: 4ecf8aae-953d-4450-8edf-f00f2606b494
  TARGET_BRANCH: "e2e_test_generator"
  ENVIRONMENT: local

stages:
  - stage: Generate_E2E_Tests
    jobs:
      - job: GenerateTestsJob
        pool:
          name: Vienna-UX-Windows2022-E2E
        steps:
          - template: ../../apps/ai-studio/pipeline/templates/e2e-test-setup.yml

          - task: NodeTool@0
            inputs:
              versionSpec: "20.x"
            displayName: "Install Node.js"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.11"
              addToPath: true
            displayName: "Use Python 3.11"

          - powershell: |
              Write-Host "Installing Yarn and Lerna..."
              npm install -g yarn
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to install Yarn"
                  exit 1
              }

              npm install -g lerna
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to install Lerna"
                  exit 1
              }

              Write-Host "Navigating to token server directory..."
              cd "$(Build.SourcesDirectory)"

              Write-Host "Starting token server in background with logs..."
              $logPath = "$(Build.ArtifactStagingDirectory)\token-server.log"
              Start-Process -FilePath "cmd.exe" `
                -ArgumentList "/c yarn start token-server > `"$logPath`" 2>&1" `
                -NoNewWindow

              Write-Host "Waiting for server to initialize..."
              Start-Sleep -Seconds 15

              Write-Host "Token server started. Dumping current logs:"
              Get-Content $logPath -Tail 100
            displayName: "Start Token Server in Background with Logs"

          - task: PowerShell@2
            displayName: "Install Playwright, Browsers, and Start MCP Server"
            inputs:
              targetType: "inline"
              azureSubscription: 4ecf8aae-953d-4450-8edf-f00f2606b494
              script: |
                $OutputEncoding = [System.Text.Encoding]::UTF8
                Write-Host "Updating npm to latest version..."
                npm install -g npm@latest
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install -g npm@latest failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Creating temporary Node.js project..."
                New-Item -ItemType Directory -Path "playwright_project" -Force | Out-Null
                Set-Location -Path "playwright_project"
                npm init -y
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm init failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing @playwright/test..."
                npm install @playwright/test
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install @playwright/test failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing Playwright browser dependencies..."
                $maxRetries = 3
                $retryCount = 0
                while ($retryCount -lt $maxRetries) {
                    Write-Host "Attempt $($retryCount + 1) to install Playwright browsers..."
                    npx playwright install --with-deps
                    if ($LASTEXITCODE -eq 0) {
                        break
                    }
                    $retryCount++
                    Start-Sleep -Seconds 5
                }
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Playwright browser installation failed after $maxRetries attempts. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing Playwright MCP server globally..."
                npm install -g @playwright/mcp@latest
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install -g @playwright/mcp failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Starting Playwright MCP server in background..."
                Start-Process -FilePath "npx" -ArgumentList "@playwright/mcp@latest", "--port", "8931", "--host", "127.0.0.1" -NoNewWindow
                Start-Sleep -Seconds 15
                Write-Host "Checking MCP server status..."
                netstat -ano | findstr :8931
                Write-Host "Playwright MCP server started successfully"
              retry: 3

          - script: |
              python -m pip install --upgrade pip
              pip install -r scripts/e2e-test-generator/requirements.txt
            displayName: "Install Python Dependencies"

          - powershell: |
              Write-Host "Saving PR description to file..."
              $desc = $env:SYSTEM_PULLREQUEST_PULLREQUESTDESCRIPTION
              Write-Host "Extracted PR Description:"
              Write-Host $desc
              Set-Content -Path "pr_description.txt" -Value $desc
            displayName: "Extract PR Description"

          - task: AzureCLI@2
            displayName: "Run Test Generation script Azure OpenAI"
            inputs:
              azureSubscription: 4ecf8aae-953d-4450-8edf-f00f2606b494
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "Running Python script with Azure CLI context..."
                python scripts/e2e-test-generator/agent_v3.py
                # Check the exit code of the last executed command (python)
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Python script 'agent_v3.py' failed. Aborting task."
                    exit 1 # Exit the PowerShell script with a non-zero code to fail the Azure DevOps task
                }
                Write-Host "Python script completed successfully."
            env:
              AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
              AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)

          - powershell: |
              Write-Host "Configuring git user..."
              git config user.email "t-schanda@microsoft.com"
              git config user.name "schandamsft"

              Write-Host "Creating new branch: $(BRANCH_NAME)"
              git checkout -b $(BRANCH_NAME)

              Write-Host "Adding generated tests..."
              git add tests/

              Write-Host "Committing changes..."
              git commit -m "Add AI-generated Playwright tests"

              Write-Host "Pushing to remote branch..."
              git push https://$(System.AccessToken)@msdata.visualstudio.com/Vienna/_git/workspace-portal HEAD:$(BRANCH_NAME)
            displayName: "Push AI-Generated Tests to the Repo"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - powershell: |
              Write-Host "Creating Azure DevOps PR..."
              az repos pr create `
                --repository workspace-portal `
                --source $(BRANCH_NAME) `
                --target $(TARGET_BRANCH) `
                --title "AI-Generated Tests [Build $(Build.BuildId)]" `
                --description "Generated via LLM based on PR description" `
                --project Vienna `
                --organization https://msdata.visualstudio.com `
                --output table
            displayName: "Create Pull Request"
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
