trigger: none
pr: none

pool:
  vmImage: Vienna-UX-Windows2022-E2E

variables:
  azureServiceConnection: 4ecf8aae-953d-4450-8edf-f00f2606b494
  ENVIRONMENT: local
  NEW_BRANCH_NAME: self-healed-tests-$(Build.BuildId)
  TEST_SCRIPT_PATH: tests/ai-foundry-language-playground.spec.ts
  ERROR_JSON_PATH: scripts/e2e-test-generator/test-ai-result.json
  TARGET_BRANCH: e2e_test_generator

stages:
  - stage: Self_Heal_E2E_Tests
    jobs:
      - job: HealTestsJob
        pool:
          name: Vienna-UX-Windows2022-E2E

        steps:
          - template: ../../apps/ai-studio/pipeline/templates/e2e-test-setup.yml

          - task: NodeTool@0
            inputs:
              versionSpec: "22.x"
            displayName: "Install Node.js"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.11"
              addToPath: true
            displayName: "Use Python 3.11"

          - script: |
              python -m pip install --upgrade pip
              pip install -r scripts/e2e-test-generator/requirements.txt
            displayName: "Install Python Dependencies"

          - powershell: |
              Write-Host "Installing Yarn and Lerna..."
              npm install -g yarn
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to install Yarn"
                  exit 1
              }

              npm install -g lerna
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to install Lerna"
                  exit 1
              }

              Write-Host "Navigating to source directory..."
              cd "$(Build.SourcesDirectory)"

              Write-Host "Starting token server in background with logs..."
              $tokenLogPath = "$(Build.ArtifactStagingDirectory)\token-server.log"
              Start-Process -FilePath "cmd.exe" `
                -ArgumentList "/c yarn start token-server > `"$tokenLogPath`" 2>&1" `
                -NoNewWindow

              Write-Host "Starting AI Studio server in background with logs..."
              $aiStudioLogPath = "$(Build.ArtifactStagingDirectory)\ai-studio.log"
              Start-Process -FilePath "cmd.exe" `
                -ArgumentList "/c yarn start:ai-studio > `"$aiStudioLogPath`" 2>&1" `
                -NoNewWindow

              Write-Host "Waiting for servers to initialize..."
              Start-Sleep -Seconds 30

              Write-Host "Token server logs:"
              if (Test-Path $tokenLogPath) {
                  Get-Content $tokenLogPath -Tail 100
              } else {
                  Write-Warning "Token server log file not found at $tokenLogPath"
              }

              Write-Host "AI Studio server logs:"
              if (Test-Path $aiStudioLogPath) {
                  Get-Content $aiStudioLogPath -Tail 100
              } else {
                  Write-Warning "AI Studio server log file not found at $aiStudioLogPath"
              }
            displayName: "Start Token Server and AI Studio Server in Background with Logs"

          - task: PowerShell@2
            displayName: "Install Playwright, Browsers, and Start MCP Server"
            inputs:
              targetType: "inline"
              script: |
                $OutputEncoding = [System.Text.Encoding]::UTF8
                Write-Host "Updating npm to latest version..."
                npm install -g npm@latest
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install -g npm@latest failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Creating temporary Node.js project..."
                New-Item -ItemType Directory -Path "playwright_project" -Force | Out-Null
                Set-Location -Path "playwright_project"
                npm init -y
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm init failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing @playwright/test..."
                npm install @playwright/test
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install @playwright/test failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing Playwright browser dependencies..."
                $maxRetries = 3
                $retryCount = 0
                while ($retryCount -lt $maxRetries) {
                    Write-Host "Attempt $($retryCount + 1) to install Playwright browsers..."
                    npx playwright install --with-deps
                    if ($LASTEXITCODE -eq 0) {
                        break
                    }
                    $retryCount++
                    Start-Sleep -Seconds 5
                }
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Playwright browser installation failed after $maxRetries attempts. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Installing Playwright MCP server globally..."
                npm install -g @playwright/mcp@latest
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "npm install -g @playwright/mcp failed. Aborting."
                    exit $LASTEXITCODE
                }

                Write-Host "Starting Playwright MCP server in background..."
                Start-Process -FilePath "cmd.exe" `
                  -ArgumentList "/c npx @playwright/mcp@latest --port 8931 --host 127.0.0.1" `
                  -NoNewWindow

                Start-Sleep -Seconds 15
                Write-Host "Checking MCP server status..."
                netstat -ano | findstr :8931
                Write-Host "Playwright MCP server started successfully"
              retry: 3

          - task: PowerShell@2
            displayName: "Run Playwright E2E and Self-Heal Bash Script"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Ensuring Chocolatey is installed..."
                if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                    Write-Host "Installing Chocolatey..."
                    Set-ExecutionPolicy Bypass -Scope Process -Force
                    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                }

                Write-Host "Ensuring Git Bash is installed..."
                if (-not (Test-Path "C:\Program Files\Git\bin\bash.exe")) {
                    Write-Host "Installing Git Bash via Chocolatey..."
                    choco install git -y --no-progress
                    if ($LASTEXITCODE -ne 0) {
                        Write-Error "Failed to install Git Bash"
                        exit 1
                    }
                }

                Write-Host "Making run_e2e_and_heal.sh executable..."
                & "C:\Program Files\Git\bin\bash.exe" -c "chmod +x scripts/e2e-test-generator/run_e2e_and_heal.sh"

                Write-Host "Running E2E and self-heal script..."
                $env:AZURE_OPENAI_ENDPOINT = "$(AZURE_OPENAI_ENDPOINT)"
                $env:AZURE_OPENAI_API_KEY = "$(AZURE_OPENAI_API_KEY)"
                & "C:\Program Files\Git\bin\bash.exe" -c "./scripts/e2e-test-generator/run_e2e_and_heal.sh"
                if ($LASTEXITCODE -ne 0) {
                    Write-Host "Bash script encountered errors, but continuing pipeline due to self-healing intent"
                }
            continueOnError: true
            env:
              AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
              AZURE_OPENAI_API_KEY: $(AZURE_OPENAI_API_KEY)

          - powershell: |
              Write-Host "Configuring git user..."
              git config user.email "t-schanda@microsoft.com"
              git config user.name "schandamsft"

              Write-Host "Target branch for new PR: $(TARGET_BRANCH)"
              Write-Host "Creating new branch: $(NEW_BRANCH_NAME)"
              git checkout -b $(NEW_BRANCH_NAME)

              Write-Host "Adding healed tests..."
              git add healed_tests/

              Write-Host "Checking for changes..."
              $changes = git status --porcelain
              if (-not $changes) {
                  Write-Host "No changes to commit. Skipping commit and PR creation."
                  exit 0
              }

              Write-Host "Committing changes..."
              git commit -m "Add self-healed Playwright test for build #$(Build.BuildId)"

              Write-Host "Pushing to new branch..."
              git push https://$(System.AccessToken)@msdata.visualstudio.com/Vienna/_git/workspace-portal HEAD:$(NEW_BRANCH_NAME)
            displayName: "Push Self-Healed Tests to New Branch"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - powershell: |
              Write-Host "Creating new PR for self-healed tests..."
              $prTitle = "Self-Healed Tests for Build #$(Build.BuildId)"
              $prDescription = "This PR contains self-healed Playwright tests generated for build #$(Build.BuildId). Please review the healed tests for accuracy and stability."

              az repos pr create `
                --repository workspace-portal `
                --source $(NEW_BRANCH_NAME) `
                --target $(TARGET_BRANCH) `
                --title "$prTitle" `
                --description "$prDescription" `
                --project Vienna `
                --organization https://msdata.visualstudio.com `
                --output table
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to create PR. Aborting."
                  exit 1
              }
              Write-Host "New PR created successfully targeting $(TARGET_BRANCH)."
            displayName: "Create New Pull Request for Self-Healed Tests"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

          - powershell: |
              Write-Host "Pipeline completed successfully."
              Write-Host "Self-healed tests have been pushed to branch: $(NEW_BRANCH_NAME)"
              Write-Host "A new PR has been created targeting: $(TARGET_BRANCH)"
              Write-Host "Please review the new PR containing the healed tests."
            displayName: "Pipeline Completion Summary"
